snippet fu
	func! ${1:F}(${2}) abort
		${3}
	endfunc
snippet for
	for ${1:needle} in ${2:haystack}
		${3}
	endfor
snippet wh
	while ${1:condition}
		${2}
	endw
snippet if
	if ${1:condition}
		${2}
	endif
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	endif
snippet i
	if ${1:condition} | ${2:return} | endif
snippet au
	au ${1:BufRead} ${2:*} ${3:echo "hello"}
snippet aug
	augroup ${1:GROUP_NAME} | au!
	    ${2}
	augroup END
snippet tr
	try
		${1}
	catch ${2:/.*/}
		${3:echom v:exception}
	endtry
snippet ty
	try
		${1}
	finally
		${2}
	endtry
snippet try
	try
		${1}
	catch ${2:/.*/}
		${3:echom v:exception}
	finally
		${4}
	endtry
snippet {
	{${1} -> ${2}}
snippet ?
	(${1} ? ${2} : ${3})
snippet didp plugin guard
	if exists('g:loaded_${1:pluginname}')
		finish
	endif
	let g:loaded_$1 = 1
snippet didf ftplugin guard
	if exists("b:did_ftplugin")
		finish
	endif
	let b:did_ftplugin = 1
snippet didi indent guard
	if exists("b:did_indent")
		finish
	endif
	let b:did_indent = 1
snippet undof ftplugin undo
	let s:undo_opts = "setl ${1:expandtab}<${2}"

	setlocal $1

	if exists('b:undo_ftplugin')
		let b:undo_ftplugin .= "|" .. s:undo_opts
	else
		let b:undo_ftplugin = s:undo_opts
	endif
snippet undoi indent undo
	let s:undo_opts = "setl ${1:inde}<${2}"

	setlocal $1

	if exists('b:undo_indent')
		let b:undo_indent .= "|" .. s:undo_opts
	else
		let b:undo_indent = s:undo_opts
	endif
snippet err
	echohl Error
	echomsg "${1:Error message!}"
	echohl None
